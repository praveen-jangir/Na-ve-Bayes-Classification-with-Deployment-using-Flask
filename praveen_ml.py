# -*- coding: utf-8 -*-
"""Praveen-ML.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iuz5FcZL678jMkj5D3g-eE_M90qtF2Po
"""

# # Data Preprocessing
# Importing the libraries
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

dataset = pd.read_csv("/content/Praveen PGI18CS032 - Classification Dataset2.csv - Praveen PGI18CS032 - Classification Dataset2.csv.csv")

dataset['Gender'] = dataset['Gender'].replace({'Male': 0,'Female': 1,})

dataset.to_csv("/content/Praveen PGI18CS032 - Classification Dataset2.csv - Praveen PGI18CS032 - Classification Dataset2.csv.csv", index=False)

dataset

dataset.isnull().sum()

X=dataset[["Gender","Glucose","BP","SkinThickness","Insulin","BMI","PedigreeFunction","Age"]]
y=dataset["Outcome"]
for column in X:
    X[column] = X[column].replace(0, np.NaN)
    mean = int(X[column].mean(skipna=True))
    X[column] = X[column].replace(np.NaN, mean)

print(X)

print(y)

# Splitting the dataset into the Training set and Test set
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.25, random_state = 0)

print(X_train)

print(X_test)

print(y_test)

print(y_train)

mean_age=X['Age'].mean()
mean_age=np.round(mean_age,2)
mean_age

dataset.isnull().sum()

from sklearn.naive_bayes import GaussianNB
classifier = GaussianNB()
X=X_train
y=y_train
classifier.fit(X, y)

y_pred = classifier.predict(X_test)

print(y_pred)

# Making the Confusion Matrix
from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
print('Confusion matrix: ')
print(cm)

# calculate Accuracy
from sklearn.metrics import accuracy_score
print('Accuracy: %.2f' % (accuracy_score(y_test, y_pred)*100))

from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
# calculate precision
# Precision = TruePositives / (TruePositives + FalsePositives)
precision = precision_score(y_test, y_pred, average='binary')
print('Precision: %.3f' % (precision*100))

# calculate recall
# Recall = TruePositives / (TruePositives + FalseNegatives)
recall = recall_score(y_test, y_pred, average='binary')
print('Recall: %.3f' % (recall*100))

# calculate recall
# Recall = TruePositives / (TruePositives + FalseNegatives)
recall = recall_score(y_test, y_pred, average='binary')
print('Recall: %.3f' % (recall*100))

# F-Measure = (2 * Precision * Recall) / (Precision + Recall)
# calculate score
score = f1_score(y_test, y_pred, average='binary')
print('F-Measure: %.3f' % (score*100))

import pickle 
print("[INFO] Saving model...")
# Save the trained model as a pickle string. 
saved_model=pickle.dump(classifier,open('praveen.pkl', 'wb')) 
# Saving model to disk

# Load the pickled model 
model = pickle.load(open('Naive_Bayes_education_model.pkl','rb'))  
# Use the loaded pickled model to make predictions 
model.predict(X_test)

# save the model to disk
import joblib
from google.colab import drive
drive.mount('/content/drive')
filename = 'praveen.pkl'
joblib.dump(classifier, filename)
 
# some time later...
 
# load the model from disk
randomforest_model = joblib.load(filename)
result = randomforest_model.score(X_test, y_test)
print(result)

Gender =  89.30#@param {type:"number"}
Glucose =  72.00#@param {type:"number"}
BP =  74.90#@param {type:"number"}
SkinThickness =  67#@param {type:"number"}
Insulin =  67#@param {type:"number"}
BMI =  67#@param {type:"number"}
PedigreeFunction = 56.630 #@param {type:"number"}
Age =  1#@param {type:"number"}
   # load the model from disk
naive_Bayes_model = joblib.load(filename)
     
output=naive_Bayes_model.predict([[marksinsecondary, marksinhighersecondary ,aggregatemarks,VIIsemmarks, VIsemmarks,Vsemmarks,finalperformance, medium]])
print("Placed =", output)
if output==[1]:
  print( 'person has that disease.')
else:
  print('person has not that disease.')

!pip install flask-ngrok

# Commented out IPython magic to ensure Python compatibility.
# %mkdir templates -p

# Commented out IPython magic to ensure Python compatibility.
# %%writefile templates/index.html
# <!DOCTYPE html>
# <html >
# <!--From https://codepen.io/frytyler/pen/EGdtg-->
# <head>
# <title>Machine Learning Lab Experiment Deployment</title>
# <meta charset="UTF-8">
# <link href='https://fonts.googleapis.com/css?family=Pacifico' rel='stylesheet' type='text/css'>
# <link href='https://fonts.googleapis.com/css?family=Arimo' rel='stylesheet' type='text/css'>
# <link href='https://fonts.googleapis.com/css?family=Hind:300' rel='stylesheet' type='text/css'>
# <link href='https://fonts.googleapis.com/css?family=Open+Sans+Condensed:300' rel='stylesheet' type='text/css'>
#  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.0.0-beta1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-giJF6kkoqNQ00vy+HMDP7azOuL0xtbfIcaT9wjKHr8RbDVddVHyTfAAsrekwKmP1" crossorigin="anonymous"> 
# <style><!DOCTYPE html>
# 
# h1 {text-align: center;}
# h2 {text-align: center;}
# h3 {text-align: center;}
# p {text-align: center;}
# div {text-align: center;}
# </style>
# </head>
# 
# <body>
#  
#      
# <div class="" style="background-color:blue;" >
# <div class="clearfix">
#            
# <div class="col-md-12">
# <center><p style="font-size:40px;color:white;margin-top:10px;">Poornima Institute of Engineering & Technology</p></center> 
# <center><p style="font-size:30px;color:white;margin-top:10px;">Department of Computer Engineering</p></center> 
# <center><p style="font-size:25px;color:white;margin-top:10px;">Machine Learning Lab Experiment Deployment</p></center> 
# </div>
# </div>
# </div>
# 
# <div class="login">
# <h2 >Naive Bayes classification for prediction of Placement</h2>
# <h4>Developed by Deepak Moud</h4>
# <!-- Main Input For Receiving Query to our ML -->
# <form action="{{ url_for('predict')}}"method="get">
# <div class="form-floating mb-3">
# <input type="number" class="form-control" id="floatingInput" name="percentage10" placeholder="Percentage" min="1" max="100" required="required" />
# <label for="floatingInput">Enter person Gender</label>
# </div>
# <br>
# <div class="form-floating mb-3">
# <input type="number" class="form-control" id="floatingInput" name="percentage12" placeholder="Percentage" min="1" max="100" required="required" />
# <label for="floatingInput">Enter person Glucose</label>
# </div>
# <br>
# <div class="form-floating mb-3">
# <input type="number" name="BTechpercentage" class="form-control" id="floatingInput" placeholder="Percentage" min="1" max="100" required="required" />
# <label for="floatingInput">Enter person BP</label>
# </div>
# <br>
# <div class="form-floating mb-3">
# <input type="number" name="marks7sem" class="form-control" id="floatingInput" placeholder="Percentage" min="1" max="100" required="required" />
# <label for="floatingInput">Enter person SkinThickness</label>
# </div>
# <br>
# <div class="form-floating mb-3">
# <input type="number" name="marks6sem" class="form-control" id="floatingInput" placeholder="Percentage"min="1" max="100" required="required" />
# <label for="floatingInput">Enter person Insulin</label>
# </div>
# <br>
# <div class="form-floating mb-3">
# <input type="number" name="marks5sem" class="form-control" id="floatingInput" placeholder="Percentage" min="1" max="100" required="required" />
# <label for="floatingInput">Enter person BMI</label>
# </div>
# <br>
# <div class="form-floating mb-3">
# <input type="number" name="finalperformance" class="form-control" id="floatingInput" placeholder="Percentage" min="1" max="100" required="required" />
# <label for="floatingInput">Enter person PedigreeFunction</label>
# </div>
# <br>
# <div class="form-floating mb-3">
# <input type="number" name="finalperformance" class="form-control" id="floatingInput" placeholder="Percentage" min="1" max="100" required="required" />
# <label for="floatingInput">Enter person Age</label>
# </div>
# <br>
# <br>
# <br>
# <button type="submit" class="btn btn-primary btn-block btn-large">Predict disease</button>
# </form>
# <br>
# <br>
# {{ prediction_text }}
# 
# </div>
# 
# <div class="" style="background-color:blue;" >
# <div class="clearfix">
#            
# <div class="col-md-12">
#  <center><p style="font-size:25px;color:white;margin-top:20px;">Machine Learning Lab</p></center> 
# </div>
# </div>
# </div>
# </body>
# </html>
# 
#

!pip install flask-ngrok
import numpy as np
from flask import Flask, request, jsonify, render_template
from flask_ngrok import run_with_ngrok
import pickle
import pandas as pd
dataset= pd.read_csv('/content/Praveen PGI18CS032 - Classification Dataset2.csv - Praveen PGI18CS032 - Classification Dataset2.csv.csv')
X = dataset.iloc[:, 0:8].values
from sklearn.preprocessing import StandardScaler
sc = StandardScaler()
X = sc.fit_transform(X)

app = Flask(__name__)
model = pickle.load(open('praveen.pkl','rb')) 
run_with_ngrok(app)

@app.route('/')
def home():
  
    return render_template("index.html")
  
@app.route('/predict',methods=['GET'])
def predict():
    
    
    
    '''
    For rendering results on HTML GUI
    '''
    percentage10 = int(request.args.get('percentage10'))
    percentage12 = int(request.args.get('percentage12'))
    BTechpercentage = int(request.args.get('BTechpercentage'))
    marks7sem = int(request.args.get('marks7sem'))
    marks6sem = int(request.args.get('marks6sem'))
    marks5sem = int(request.args.get('marks5sem'))
    finalperformance = int(request.args.get('finalperformance'))
    medium = int(request.args.get('medium'))
    prediction = model.predict([[percentage10,percentage12, BTechpercentage, marks7sem, marks6sem,marks5sem, finalperformance, medium ]])
    print(prediction)
    if prediction==[1]:
        output='Placed'
    else:
        output='Not Placed'
        
    return render_template('index.html', prediction_text='Model has predicted student will be : {}'.format(output))


app.run()

